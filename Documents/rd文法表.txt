/**********************************
program
   : external_declaration { external_declartion }
   ;

external_declaration
    : type declarator decl_or_stmt


decl_or_stmt
    : '{' statement_list '}'
    | '{' '}'
    | ',' declarator_list ';'
    | ';'
    ;

declarator_list
    : declarator { ',' declarator }
    ;

intstr_list
    : initializer { ',' initializer }
    ;

initializer
    : NUMBER
    | STRING
    ;

declarator
    : ID
    | ID '=' expr
    | ID '(' parameter_list ')'
    | ID '(' ')'
    | ID '[' expr ']'
    | ID '[' ']'
    | ID '[' expr ']' '=' '{' intstr_list '}'
    | ID '[' ']' '=' '{' intstr_list '}'
    ;

parameter_list
        : parameter { ',' parameter }
        ;

parameter
        : type ID
        ;

type
        : INT
        | STR
        | VOID
        ;

statement
    : type declarator_list ';'
    | '{' statement_list '}'
    | expr_statement
    | IF '(' expr ')' statement
    | IF '(' expr ')' statement ELSE statement
    | WHILE '(' expr ')' statement
    | RETURN ';'
    | RETURN expr ';'
    | PRINT ';'
    | PRINT expr_list ';'
    | SCAN id_list ';'
    ;


statement_list
    : statement { statement }
    ;

expression_statement
    : ';'
    | expr ';'
    ;

expr
    : cmp_expr
    ;
**************************************************/
cmp_expr
    : add_expr { CMP add_expr }
    ;
	
CMP
	: >=
	| <=
	| ==
	| >
	| <
	;

add_expr
    : mul_expr {  '+' mul_expr | '-' mul_expr }
    ;
	
mul_expr
    : {'-'|ç©º} primary_expr { '*' primary_expr | '/' primary_expr | '%' primary_expr}
	;

primary_expr
    : ID '(' expr_list ')'
    | ID '(' ')'
    | ID
    | ID '=' expr
    | ID '[' expr ']'
    | ID '[' expr ']' '=' expr
    | '(' expr ')'
    | NUMBER
    | STRING
    ;
	
expr_list
    : expr { ',' expr }
    ;
	
id_list
    : ID { ',' ID }
    ;
